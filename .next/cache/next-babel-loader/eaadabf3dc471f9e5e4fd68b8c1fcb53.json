{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport Button from '@material-ui/core/Button';\nimport { Container, Row, Column, HideShow } from './styles';\nimport { maskMoney } from '../MaksMoney';\nimport { maskDecimal } from '../MaskDecimal';\nimport List from './components/List';\nimport Cards from './components/Cards';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp';\nimport MoneyIcon from '@material-ui/icons/Money';\nimport Info from '@material-ui/icons/Info';\nimport LineChart from '../Charts/LineChart';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nconst FormCalcPorSalario = () => {\n  const {\n    0: lista,\n    1: setLista\n  } = useState([]);\n  const {\n    0: aporteMensal,\n    1: setAporteMensal\n  } = useState('0,00');\n  const {\n    0: showModal,\n    1: setShowModal\n  } = useState(true);\n  const {\n    0: labels,\n    1: setLabels\n  } = useState();\n  const {\n    0: dataSet,\n    1: setDataSet\n  } = useState();\n  const {\n    0: show,\n    1: setShow\n  } = useState(false);\n  const {\n    handleSubmit,\n    register,\n    setValue,\n    errors,\n    getValues,\n    control\n  } = useForm({\n    defaultValues: {\n      salarioMensal: null,\n      percentualAporte: null,\n      rendimentoAnual: null\n    }\n  });\n\n  const onSubmit = data => {\n    const rendimentoAnual = parseFloat(data.rendimentoAnual.toString().replace(',', '.'));\n    const redimentoMensal = (1 + rendimentoAnual / 100) ** (1 / 12) - 1;\n    const listaTemp = [];\n    let ano = 60;\n    const labelsLine = [];\n    const dataLine = [];\n\n    for (let i = 0; i < 360; i++) {\n      if (i === 0) {\n        listaTemp.push({\n          mes: i + 1,\n          rendimento: 0,\n          valorInicial: 0,\n          aporteFinal: parseFloat(aporteMensal.toString().replace('.', '').replace(',', '.'))\n        });\n      } else {\n        const aporteMe = parseFloat(aporteMensal.toString().replace('.', '').replace(',', '.'));\n        const rendimentoAtual = listaTemp[i - 1].aporteFinal * redimentoMensal;\n        listaTemp.push({\n          mes: i + 1,\n          valorInicial: listaTemp[i - 1].aporteFinal,\n          rendimento: rendimentoAtual,\n          aporteFinal: aporteMe + listaTemp[i - 1].aporteFinal + rendimentoAtual\n        });\n\n        if (ano === i + 1) {\n          labelsLine.push(`Ano ${ano / 12}`);\n          const valor = aporteMe + listaTemp[i - 1].aporteFinal + rendimentoAtual;\n          dataLine.push(valor.toFixed(2));\n          ano = ano + 60;\n        }\n      }\n    }\n\n    setDataSet([{\n      label: 'Evolução Patrimônial',\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: 'rgba(75,192,192,0.4)',\n      borderColor: 'rgba(75,192,192,1)',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'rgba(75,192,192,1)',\n      pointBackgroundColor: '#fff',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: dataLine\n    }]);\n    setLabels(labelsLine);\n    setLista(listaTemp);\n  };\n\n  function calcAporteMensal(e) {\n    if ((e === null || e === void 0 ? void 0 : e.target.name) === 'percentualAporte') {\n      setValue('percentualAporte', maskDecimal(e === null || e === void 0 ? void 0 : e.target.value));\n    }\n\n    if ((e === null || e === void 0 ? void 0 : e.target.name) === 'rendimentoAnual') {\n      setValue('rendimentoAnual', maskDecimal(e === null || e === void 0 ? void 0 : e.target.value));\n    }\n\n    const salarioMensal = parseFloat(getValues('salarioMensal').toString().replace('.', '').replace(',', '.'));\n    const percentualAporte = parseFloat(getValues('percentualAporte').toString().replace(',', '.')) / 100;\n    const aporteMensal = percentualAporte * salarioMensal;\n\n    if (aporteMensal) {\n      setAporteMensal(maskMoney(Number(aporteMensal).toFixed(2).toString()));\n    } else {\n      setAporteMensal(maskMoney('000'));\n    }\n  }\n\n  function onChangeRemunaration(e) {\n    setValue('salarioMensal', maskMoney(e.target.value));\n    calcAporteMensal(undefined);\n  }\n\n  function onChangeLimpar() {\n    setValue('salarioMensal', undefined);\n    setValue('percentualAporte', undefined);\n    setValue('rendimentoAnual', undefined);\n    setAporteMensal('0,00');\n    setLista([]);\n  }\n\n  useEffect(() => {\n    onChangeLimpar();\n    setShowModal(localStorage.getItem(window.location.pathname) === null);\n  }, []);\n  return __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(Container, null, __jsx(Row, null, __jsx(Column, null, __jsx(Controller, {\n    name: \"salarioMensal\",\n    control: control,\n    render: () => __jsx(TextField, {\n      error: errors.salarioMensal !== undefined,\n      id: \"standard-basic\",\n      size: \"small\",\n      fullWidth: true,\n      label: __jsx(Row, null, \"Sal\\xE1rio Mensal\", ' ', __jsx(InputAdornment, {\n        position: \"end\"\n      }, __jsx(Tooltip, {\n        title: \"Aqui ser\\xE1 informado a sua renda mensal\"\n      }, __jsx(Info, null)))),\n      onChange: onChangeRemunaration,\n      placeholder: \"3.000,00\",\n      inputRef: register({\n        required: 'Campo obrigatório'\n      }),\n      InputProps: {\n        name: 'salarioMensal',\n        startAdornment: __jsx(InputAdornment, {\n          position: \"start\"\n        }, \"R$\")\n      }\n    })\n  })), __jsx(Column, null, __jsx(Controller, {\n    name: \"percentualAporte\",\n    control: control,\n    render: () => __jsx(TextField, {\n      error: errors.percentualAporte !== undefined,\n      id: \"standard-basic\",\n      label: __jsx(Row, null, \"Valor Mensal\", ' ', __jsx(InputAdornment, {\n        position: \"end\"\n      }, __jsx(Tooltip, {\n        title: \"Aqui ser\\xE1 informado a percentagem do quanto deseja reservar do seu sal\\xE1rio para aplicar mensalmente\"\n      }, __jsx(Info, null)))),\n      onChange: calcAporteMensal,\n      placeholder: \"20%\",\n      size: \"small\",\n      fullWidth: true,\n      inputRef: register({\n        required: 'Campo obrigatório',\n        maxLength: 6\n      }),\n      inputProps: {\n        maxLength: 6,\n        name: 'percentualAporte'\n      },\n      InputProps: {\n        startAdornment: __jsx(InputAdornment, {\n          position: \"start\"\n        }, __jsx(MoneyIcon, null))\n      }\n    })\n  }))), __jsx(Row, null, __jsx(Column, null, __jsx(\"label\", null, \"Aporte Mensal\"), __jsx(\"h2\", {\n    style: {\n      color: '#000'\n    }\n  }, \"R$ \", aporteMensal)), __jsx(Column, null, __jsx(Controller, {\n    name: \"rendimentoAnual\",\n    control: control,\n    render: () => __jsx(TextField, {\n      error: errors.rendimentoAnual !== undefined,\n      id: \"standard-basic\",\n      label: __jsx(Row, null, \"Rendimento Anual\", ' ', __jsx(InputAdornment, {\n        position: \"end\"\n      }, __jsx(Tooltip, {\n        title: \"Aqui ser\\xE1 informado o redimento anual de suas aplica\\xE7\\xF5es\"\n      }, __jsx(Info, null)))),\n      onChange: calcAporteMensal,\n      placeholder: \"8,65%\",\n      inputRef: register({\n        required: 'Campo obrigatório',\n        maxLength: 6\n      }),\n      size: \"small\",\n      fullWidth: true,\n      inputProps: {\n        maxLength: 6\n      },\n      InputProps: {\n        name: 'rendimentoAnual',\n        startAdornment: __jsx(InputAdornment, {\n          position: \"start\"\n        }, __jsx(TrendingUpIcon, null))\n      }\n    })\n  }))), __jsx(Row, {\n    style: {\n      justifyContent: 'flex-end'\n    }\n  }, __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    type: \"submit\",\n    style: {\n      marginRight: '8px'\n    },\n    fullWidth: true\n  }, \"Calcular\"), __jsx(Button, {\n    type: \"button\",\n    variant: \"contained\",\n    onClick: onChangeLimpar,\n    fullWidth: true\n  }, \"Limpar\"))), lista.length > 0 && __jsx(React.Fragment, null, __jsx(Cards, {\n    lista: lista\n  }), __jsx(LineChart, {\n    labels: labels,\n    dataSet: dataSet\n  }), __jsx(Button, {\n    onClick: () => setShow(!show)\n  }, show ? 'Esconder Detalhes' : 'Exibir Detalhes'), __jsx(HideShow, {\n    show: show\n  }, __jsx(List, {\n    lista: lista\n  }), ' ')));\n};\n\nexport default FormCalcPorSalario;","map":null,"metadata":{},"sourceType":"module"}