{"ast":null,"code":"var _jsxFileName = \"/Users/esdraspinheiro/Documents/Projetos/next-independencia-financeira/src/components/FormCalc/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport Button from '@material-ui/core/Button';\nimport { Container, Row, Column } from './styles';\nimport { maskMoney } from '../../components/MaksMoney';\nimport { maskDecimal } from '../../components/maskDecimal';\nimport List from './components/List';\nimport Cards from './components/Cards';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp';\nimport MoneyIcon from '@material-ui/icons/Money';\n\nconst FormCalc = () => {\n  const {\n    0: lista,\n    1: setLista\n  } = useState([]);\n  const {\n    0: aporteMensal,\n    1: setAporteMensal\n  } = useState('00,00');\n  const {\n    handleSubmit,\n    register,\n    setValue,\n    errors,\n    getValues,\n    control\n  } = useForm({\n    defaultValues: {\n      salarioMensal: null,\n      percentualAporte: null,\n      rendimentoAnual: null\n    }\n  });\n\n  const onSubmit = data => {\n    const redimentoMensal = (1 + data.rendimentoAnual / 100) ** (1 / 12) - 1;\n    const listaTemp = [];\n\n    for (let i = 0; i < 360; i++) {\n      if (i === 0) {\n        listaTemp.push({\n          mes: i + 1,\n          rendimento: 0,\n          valorInicial: 0,\n          aporteFinal: parseFloat(aporteMensal.toString().replace('.', '').replace(',', '.'))\n        });\n      } else {\n        const aporteMe = parseFloat(aporteMensal.toString().replace('.', '').replace(',', '.'));\n        const rendimentoAtual = listaTemp[i - 1].aporteFinal * redimentoMensal;\n        listaTemp.push({\n          mes: i + 1,\n          valorInicial: listaTemp[i - 1].aporteFinal,\n          rendimento: rendimentoAtual,\n          aporteFinal: aporteMe + listaTemp[i - 1].aporteFinal + rendimentoAtual\n        });\n      }\n    }\n\n    setLista(listaTemp);\n  };\n\n  function calcAporteMensal(e) {\n    if ((e === null || e === void 0 ? void 0 : e.target.name) === 'percentualAporte') {\n      setValue('percentualAporte', maskDecimal(e === null || e === void 0 ? void 0 : e.target.value));\n    }\n\n    if ((e === null || e === void 0 ? void 0 : e.target.name) === 'rendimentoAnual') {\n      setValue('rendimentoAnual', maskDecimal(e === null || e === void 0 ? void 0 : e.target.value));\n    }\n\n    const salarioMensal = parseFloat(getValues('salarioMensal').toString().replace('.', '').replace(',', '.'));\n    const percentualAporte = parseFloat(getValues('percentualAporte').toString().replace(',', '.')) / 100;\n    const aporteMensal = percentualAporte * salarioMensal;\n\n    if (aporteMensal) {\n      setAporteMensal(maskMoney(Number(aporteMensal).toFixed(2).toString()));\n    } else {\n      setAporteMensal(maskMoney('000'));\n    }\n  }\n\n  function onChangeRemunaration(e) {\n    setValue('salarioMensal', maskMoney(e.target.value));\n    calcAporteMensal(undefined);\n  }\n\n  function onChangeLimpar() {\n    setValue('salarioMensal', undefined);\n    setValue('percentualAporte', undefined);\n    setValue('rendimentoAnual', undefined);\n    setAporteMensal('0,00');\n    setLista([]);\n  }\n\n  useEffect(() => {\n    onChangeLimpar();\n  }, []);\n  return __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 5\n    }\n  }, __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }, __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, __jsx(Column, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, __jsx(Controller, {\n    name: \"salarioMensal\",\n    control: control,\n    render: () => __jsx(TextField, {\n      error: errors.salarioMensal !== undefined,\n      id: \"standard-basic\",\n      size: \"small\",\n      fullWidth: true,\n      label: \"Sal\\xE1rio Mensal\",\n      onChange: onChangeRemunaration,\n      placeholder: \"0,00\",\n      inputRef: register({\n        required: 'Campo obrigatório'\n      }),\n      InputProps: {\n        name: 'salarioMensal',\n        startAdornment: __jsx(InputAdornment, {\n          position: \"start\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 23\n          }\n        }, \"R$\")\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  })), __jsx(Column, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }, __jsx(Controller, {\n    name: \"percentualAporte\",\n    control: control,\n    render: () => __jsx(TextField, {\n      error: errors.percentualAporte !== undefined,\n      id: \"standard-basic\",\n      label: \"Percentual do Aporte\",\n      onChange: calcAporteMensal,\n      placeholder: \"100%\",\n      size: \"small\",\n      fullWidth: true,\n      inputRef: register({\n        required: 'Campo obrigatório',\n        maxLength: 6\n      }),\n      inputProps: {\n        maxLength: 6,\n        name: 'percentualAporte'\n      },\n      InputProps: {\n        startAdornment: __jsx(InputAdornment, {\n          position: \"start\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 23\n          }\n        }, __jsx(MoneyIcon, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 25\n          }\n        }))\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }))), __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }\n  }, __jsx(Column, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 11\n    }\n  }, __jsx(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }\n  }, \"Aporte Mensal\"), __jsx(\"h2\", {\n    style: {\n      color: '#000'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }\n  }, \"R$ \", aporteMensal)), __jsx(Column, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 11\n    }\n  }, __jsx(Controller, {\n    name: \"rendimentoAnual\",\n    control: control,\n    render: () => __jsx(TextField, {\n      error: errors.rendimentoAnual !== undefined,\n      id: \"standard-basic\",\n      label: \"Rendimento Anual\",\n      onChange: calcAporteMensal,\n      placeholder: \"100%\",\n      inputRef: register({\n        required: 'Campo obrigatório',\n        maxLength: 6\n      }),\n      size: \"small\",\n      fullWidth: true,\n      inputProps: {\n        maxLength: 6\n      },\n      InputProps: {\n        name: 'rendimentoAnual',\n        startAdornment: __jsx(InputAdornment, {\n          position: \"start\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 23\n          }\n        }, __jsx(TrendingUpIcon, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 25\n          }\n        }))\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }\n  }))), __jsx(Row, {\n    style: {\n      justifyContent: 'flex-end'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    type: \"submit\",\n    style: {\n      marginRight: '8px'\n    },\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 11\n    }\n  }, \"Calcular\"), __jsx(Button, {\n    type: \"button\",\n    variant: \"contained\",\n    onClick: onChangeLimpar,\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 11\n    }\n  }, \"Limpar\"))), lista.length > 0 && __jsx(React.Fragment, null, __jsx(Cards, {\n    lista: lista,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 11\n    }\n  }), __jsx(List, {\n    lista: lista,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default FormCalc;","map":{"version":3,"sources":["/Users/esdraspinheiro/Documents/Projetos/next-independencia-financeira/src/components/FormCalc/index.tsx"],"names":["React","useEffect","useState","useForm","Controller","Button","Container","Row","Column","maskMoney","maskDecimal","List","Cards","TextField","InputAdornment","TrendingUpIcon","MoneyIcon","FormCalc","lista","setLista","aporteMensal","setAporteMensal","handleSubmit","register","setValue","errors","getValues","control","defaultValues","salarioMensal","percentualAporte","rendimentoAnual","onSubmit","data","redimentoMensal","listaTemp","i","push","mes","rendimento","valorInicial","aporteFinal","parseFloat","toString","replace","aporteMe","rendimentoAtual","calcAporteMensal","e","target","name","value","Number","toFixed","onChangeRemunaration","undefined","onChangeLimpar","required","startAdornment","maxLength","color","justifyContent","marginRight","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useForm, Controller } from 'react-hook-form'\nimport Button from '@material-ui/core/Button'\nimport { Container, Row, Column } from './styles'\nimport { maskMoney } from '../../components/MaksMoney'\nimport { maskDecimal } from '../../components/maskDecimal'\nimport List from './components/List'\nimport Cards from './components/Cards'\nimport { IStateLista, IFormInput } from '../types'\nimport TextField from '@material-ui/core/TextField'\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp'\nimport MoneyIcon from '@material-ui/icons/Money'\n\nconst FormCalc: React.FC = () => {\n  const [lista, setLista] = useState<IStateLista[]>([])\n  const [aporteMensal, setAporteMensal] = useState('00,00')\n  const {\n    handleSubmit,\n    register,\n    setValue,\n    errors,\n    getValues,\n    control\n  } = useForm<IFormInput>({\n    defaultValues: {\n      salarioMensal: null,\n      percentualAporte: null,\n      rendimentoAnual: null\n    }\n  })\n\n  const onSubmit = (data: IFormInput) => {\n    const redimentoMensal: number =\n      (1 + data.rendimentoAnual / 100) ** (1 / 12) - 1\n    const listaTemp: IStateLista[] = []\n    for (let i = 0; i < 360; i++) {\n      if (i === 0) {\n        listaTemp.push({\n          mes: i + 1,\n          rendimento: 0,\n          valorInicial: 0,\n          aporteFinal: parseFloat(\n            aporteMensal.toString().replace('.', '').replace(',', '.')\n          )\n        })\n      } else {\n        const aporteMe = parseFloat(\n          aporteMensal.toString().replace('.', '').replace(',', '.')\n        )\n        const rendimentoAtual: number =\n          listaTemp[i - 1].aporteFinal * redimentoMensal\n        listaTemp.push({\n          mes: i + 1,\n          valorInicial: listaTemp[i - 1].aporteFinal,\n          rendimento: rendimentoAtual,\n          aporteFinal: aporteMe + listaTemp[i - 1].aporteFinal + rendimentoAtual\n        })\n      }\n    }\n    setLista(listaTemp)\n  }\n\n  function calcAporteMensal(e) {\n    if (e?.target.name === 'percentualAporte') {\n      setValue('percentualAporte', maskDecimal(e?.target.value))\n    }\n    if (e?.target.name === 'rendimentoAnual') {\n      setValue('rendimentoAnual', maskDecimal(e?.target.value))\n    }\n\n    const salarioMensal: number = parseFloat(\n      getValues('salarioMensal').toString().replace('.', '').replace(',', '.')\n    )\n    const percentualAporte: number =\n      parseFloat(getValues('percentualAporte').toString().replace(',', '.')) /\n      100\n    const aporteMensal: number = percentualAporte * salarioMensal\n\n    if (aporteMensal) {\n      setAporteMensal(maskMoney(Number(aporteMensal).toFixed(2).toString()))\n    } else {\n      setAporteMensal(maskMoney('000'))\n    }\n  }\n\n  function onChangeRemunaration(e) {\n    setValue('salarioMensal', maskMoney(e.target.value))\n    calcAporteMensal(undefined)\n  }\n\n  function onChangeLimpar() {\n    setValue('salarioMensal', undefined)\n    setValue('percentualAporte', undefined)\n    setValue('rendimentoAnual', undefined)\n    setAporteMensal('0,00')\n    setLista([])\n  }\n\n  useEffect(() => {\n    onChangeLimpar()  \n  }, [])\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Container>\n        <Row>\n          <Column>\n            <Controller\n              name=\"salarioMensal\"\n              control={control}\n              render={() => (\n                <TextField\n                  error={errors.salarioMensal !== undefined}\n                  id=\"standard-basic\"\n                  size=\"small\"\n                  fullWidth\n                  label=\"Salário Mensal\"\n                  onChange={onChangeRemunaration}\n                  placeholder=\"0,00\"\n                  inputRef={register({\n                    required: 'Campo obrigatório'\n                  })}\n                  InputProps={{\n                    name: 'salarioMensal',\n                    startAdornment: (\n                      <InputAdornment position=\"start\">R$</InputAdornment>\n                    )\n                  }}\n                />\n              )}\n            />\n          </Column>\n          <Column>\n            <Controller\n              name=\"percentualAporte\"\n              control={control}\n              render={() => (\n                <TextField\n                  error={errors.percentualAporte !== undefined}\n                  id=\"standard-basic\"\n                  label=\"Percentual do Aporte\"\n                  onChange={calcAporteMensal}\n                  placeholder=\"100%\"\n                  size=\"small\"\n                  fullWidth\n                  inputRef={register({\n                    required: 'Campo obrigatório',\n                    maxLength: 6\n                  })}\n                  inputProps={{\n                    maxLength: 6,\n                    name: 'percentualAporte'\n                  }}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <MoneyIcon />\n                      </InputAdornment>\n                    )\n                  }}\n                />\n              )}\n            />\n          </Column>\n        </Row>\n        <Row>\n          <Column>\n            <label>Aporte Mensal</label>\n            <h2 style={{ color: '#000' }}>R$ {aporteMensal}</h2>\n          </Column>\n          <Column>\n            <Controller\n              name=\"rendimentoAnual\"\n              control={control}\n              render={() => (\n                <TextField\n                  error={errors.rendimentoAnual !== undefined}\n                  id=\"standard-basic\"\n                  label=\"Rendimento Anual\"\n                  onChange={calcAporteMensal}\n                  placeholder=\"100%\"\n                  inputRef={register({\n                    required: 'Campo obrigatório',\n                    maxLength: 6\n                  })}\n                  size=\"small\"\n                  fullWidth\n                  inputProps={{\n                    maxLength: 6\n                  }}\n                  InputProps={{\n                    name: 'rendimentoAnual',\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <TrendingUpIcon />\n                      </InputAdornment>\n                    )\n                  }}\n                />\n              )}\n            />\n          </Column>\n        </Row>\n        <Row style={{ justifyContent: 'flex-end' }}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"submit\"\n            style={{ marginRight: '8px' }}\n            fullWidth\n          >\n            Calcular\n          </Button>\n          <Button\n            type=\"button\"\n            variant=\"contained\"\n            onClick={onChangeLimpar}\n            fullWidth\n          >\n            Limpar\n          </Button>\n        </Row>\n      </Container>\n      {lista.length > 0 && (\n        <>\n          <Cards lista={lista} />\n          <List lista={lista} />\n        </>\n      )}\n    </form>\n  )\n}\n\nexport default FormCalc\n"]},"metadata":{},"sourceType":"module"}