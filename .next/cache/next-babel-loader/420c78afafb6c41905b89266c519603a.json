{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport { Container } from './styles';\nconst columns = [{\n  id: 'mes',\n  label: 'MÃªs',\n  minWidth: 20\n}, {\n  id: 'rendimento',\n  label: 'Rendimento (R$)',\n  minWidth: 100\n}, {\n  id: 'valorInicial',\n  label: 'Valor Inicial (R$)',\n  minWidth: 170,\n  format: value => value.toLocaleString('pt-Br')\n}, {\n  id: 'aporteFinal',\n  label: 'Aporte Final',\n  minWidth: 170,\n  format: value => value.toLocaleString('pt-Br')\n}];\n\nconst List = ({\n  lista\n}) => {\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  return __jsx(Container, null, lista.length > 0 && __jsx(Paper, {\n    style: {\n      width: '100%'\n    }\n  }, __jsx(TableContainer, null, __jsx(Table, {\n    stickyHeader: true,\n    \"aria-label\": \"sticky table\"\n  }, __jsx(TableHead, null, __jsx(TableRow, null, columns.map(column => __jsx(TableCell, {\n    key: column.id,\n    align: column.align,\n    style: {\n      minWidth: column.minWidth\n    }\n  }, column.label)))), __jsx(TableBody, null, lista.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, idx) => {\n    return __jsx(TableRow, {\n      hover: true,\n      role: \"checkbox\",\n      tabIndex: -1,\n      key: idx\n    }, __jsx(TableCell, {\n      key: idx\n    }, row.mes), __jsx(TableCell, {\n      key: idx\n    }, row.rendimento.toLocaleString('pt-br', {\n      style: 'currency',\n      currency: 'BRL'\n    })), __jsx(TableCell, {\n      key: idx\n    }, row.valorInicial.toLocaleString('pt-br', {\n      style: 'currency',\n      currency: 'BRL'\n    })), __jsx(TableCell, {\n      key: idx\n    }, row.aporteFinal.toLocaleString('pt-br', {\n      style: 'currency',\n      currency: 'BRL'\n    })));\n  })))), __jsx(TablePagination, {\n    rowsPerPageOptions: [10, 25, 100],\n    component: \"div\",\n    count: 360,\n    rowsPerPage: rowsPerPage,\n    page: page,\n    onChangePage: handleChangePage,\n    onChangeRowsPerPage: handleChangeRowsPerPage\n  })));\n};\n\nexport default List;","map":null,"metadata":{},"sourceType":"module"}