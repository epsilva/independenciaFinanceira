{"ast":null,"code":"var _jsxFileName = \"/Users/esdraspinheiro/Documents/Projetos/next-independencia-financeira/lib/auth.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport firebase from './firebase';\nimport { createUser } from './db';\nimport { toast } from 'react-toastify';\nconst authContext = createContext({\n  auth: null,\n  loading: true,\n  signInWithGoogle: async () => {},\n  signInWithFacebook: async () => {},\n  signInWithEmailPassword: async (email, password) => {},\n  createWithEmailAndPassword: async (email, password) => {},\n  signOut: async () => {}\n});\n\nconst formatAuthState = user => ({\n  uid: user.uid,\n  email: user.email,\n  name: user.displayName,\n  photoUrl: user.photoURL,\n  token: null\n});\n\nfunction useProvideAuth() {\n  const {\n    0: auth,\n    1: setAuth\n  } = useState(null);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const listErrors = [{\n    code: 'auth/email-already-exists',\n    msg: 'O e-mail fornecido já está em uso por outro usuário. Cada usuário precisa ter um e-mail exclusivo.'\n  }, {\n    code: 'auth/id-token-expired',\n    msg: 'O token de código do Firebase provisionado expirou.'\n  }, {\n    code: 'auth/id-token-revoked',\n    msg: 'O token de código do Firebase foi revogado.'\n  }, {\n    code: 'auth/id-token-revoked',\n    msg: 'O token de código do Firebase foi revogado.'\n  }];\n  /**\n   * Callback function used for firebase.auth.onAuthStateChanged().\n   * Takes the user object returned and formats it for my state.\n   * We fetch the idToken and append it to my auth state and store it.\n   */\n\n  const handleAuthChange = async authState => {\n    if (!authState) {\n      return;\n    } // Formats response into my required state.\n\n\n    const formattedAuth = formatAuthState(authState); // Fetch firebase auth ID Token.\n\n    formattedAuth.token = await authState.getIdToken(); // Stores auth into state.\n\n    setAuth(formattedAuth); // Sets loading state to false.\n\n    setLoading(false);\n  };\n  /**\n   * Callback function used for response from firebase OAuth.\n   * Store user object returned in firestore.\n   * @param firebase User Credential\n   */\n\n\n  const signedIn = async response => {\n    setLoading(false);\n\n    if (!response.user) {\n      throw new Error('No User');\n    } // Format user into my required state.\n\n\n    const authedUser = formatAuthState(response.user); // firestore database function\n\n    createUser(authedUser.uid, authedUser);\n  };\n\n  const signedError = async response => {\n    setLoading(false);\n\n    if (response.code === 'auth/user-not-found') {\n      listErrors.filter(el => el.code === response.code)[0].msg;\n      toast.error(listErrors.filter(el => el.code === response.code)[0].msg);\n    }\n  };\n  /**\n   * Callback for when firebase signOut.\n   * Sets auth state to null and loading to true.\n   */\n\n\n  const clear = () => {\n    setAuth(null);\n    setLoading(false);\n  };\n  /**\n   * Triggers firebase Oauth for Google and calls signIn when successful.\n   * sets loading to true.\n   */\n\n\n  const signInWithGoogle = () => {\n    setLoading(true);\n    return firebase.auth().signInWithPopup(new firebase.auth.GoogleAuthProvider()).then(signedIn);\n  };\n  /**\n   * Triggers firebase Oauth for E-mail and Password and calls signIn when successful.\n   * sets loading to true.\n   */\n\n\n  const signInWithEmailPassword = (email, password) => {\n    setLoading(true);\n    return firebase.auth().signInWithEmailAndPassword(email, password).then(signedIn).catch(signedError);\n  };\n  /**\n   * Triggers firebase Oauth for facebook and calls signIn when successful.\n   * sets loading to true.\n   */\n\n\n  const signInWithFacebook = () => {\n    setLoading(true);\n    return firebase.auth().signInWithPopup(new firebase.auth.FacebookAuthProvider()).then(signedIn);\n  };\n  /**\n   * Create user with E-mail and Password.\n   * sets loading to true.\n   */\n\n\n  const createWithEmailAndPassword = (email, password) => {\n    setLoading(true);\n    return firebase.auth().createUserWithEmailAndPassword(email, password).then(signedIn);\n  };\n  /**\n   * Calls firebase signOut and with clear callback to reset state.\n   */\n\n\n  const signOut = () => {\n    return firebase.auth().signOut().then(clear);\n  };\n  /**\n   * Watches for state change for firebase auth and calls the handleAuthChange callback\n   * on every change.\n   */\n\n\n  useEffect(() => {\n    const unsubscribe = firebase.auth().onAuthStateChanged(handleAuthChange);\n    return () => unsubscribe();\n  }, []); // returns state values and callbacks for signIn and signOut.\n\n  return {\n    auth,\n    loading,\n    signInWithGoogle,\n    signInWithFacebook,\n    signInWithEmailPassword,\n    createWithEmailAndPassword,\n    signOut\n  };\n}\n\nexport function AuthProvider({\n  children\n}) {\n  const auth = useProvideAuth();\n  return __jsx(authContext.Provider, {\n    value: auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 10\n    }\n  }, children);\n}\nexport const useAuth = () => useContext(authContext);","map":{"version":3,"sources":["/Users/esdraspinheiro/Documents/Projetos/next-independencia-financeira/lib/auth.tsx"],"names":["createContext","useContext","useState","useEffect","firebase","createUser","toast","authContext","auth","loading","signInWithGoogle","signInWithFacebook","signInWithEmailPassword","email","password","createWithEmailAndPassword","signOut","formatAuthState","user","uid","name","displayName","photoUrl","photoURL","token","useProvideAuth","setAuth","setLoading","listErrors","code","msg","handleAuthChange","authState","formattedAuth","getIdToken","signedIn","response","Error","authedUser","signedError","filter","el","error","clear","signInWithPopup","GoogleAuthProvider","then","signInWithEmailAndPassword","catch","FacebookAuthProvider","createUserWithEmailAndPassword","unsubscribe","onAuthStateChanged","AuthProvider","children","useAuth"],"mappings":"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","sourcesContent":["import { createContext, Context, useContext, useState, useEffect } from 'react'\nimport firebase from './firebase'\nimport { createUser } from './db'\nimport { toast } from 'react-toastify'\n\ninterface Auth {\n  uid: string\n  email: string | null\n  name: string | null\n  photoUrl: string | null\n  token: string | null\n}\n\ninterface AuthContext {\n  auth: Auth | null\n  loading: boolean\n  signInWithGoogle: () => Promise<void>\n  signInWithFacebook: () => Promise<void>\n  signInWithEmailPassword: (email, password) => Promise<void>\n  createWithEmailAndPassword: (email, password) => Promise<void>\n  signOut: () => Promise<void>\n}\n\nconst authContext: Context<AuthContext> = createContext<AuthContext>({\n  auth: null,\n  loading: true,\n  signInWithGoogle: async () => {},\n  signInWithFacebook: async () => {},\n  signInWithEmailPassword: async (email, password) => {},\n  createWithEmailAndPassword: async (email, password) => {},\n  signOut: async () => {}\n})\n\nconst formatAuthState = (user: firebase.User): Auth => ({\n  uid: user.uid,\n  email: user.email,\n  name: user.displayName,\n  photoUrl: user.photoURL,\n  token: null\n})\n\nfunction useProvideAuth() {\n  const [auth, setAuth] = useState<Auth | null>(null)\n  const [loading, setLoading] = useState<boolean>(false)\n\n  const listErrors = [\n    {\n      code: 'auth/email-already-exists',\n      msg:\n        'O e-mail fornecido já está em uso por outro usuário. Cada usuário precisa ter um e-mail exclusivo.'\n    },\n    {\n      code: 'auth/id-token-expired',\n      msg: 'O token de código do Firebase provisionado expirou.'\n    },\n    {\n      code: 'auth/id-token-revoked',\n      msg: 'O token de código do Firebase foi revogado.'\n    },\n    {\n      code: 'auth/id-token-revoked',\n      msg: 'O token de código do Firebase foi revogado.'\n    }\n  ]\n\n  /**\n   * Callback function used for firebase.auth.onAuthStateChanged().\n   * Takes the user object returned and formats it for my state.\n   * We fetch the idToken and append it to my auth state and store it.\n   */\n  const handleAuthChange = async (authState: firebase.User | null) => {\n    if (!authState) {\n      return\n    }\n\n    // Formats response into my required state.\n    const formattedAuth = formatAuthState(authState)\n    // Fetch firebase auth ID Token.\n    formattedAuth.token = await authState.getIdToken()\n    // Stores auth into state.\n    setAuth(formattedAuth)\n    // Sets loading state to false.\n    setLoading(false)\n  }\n\n  /**\n   * Callback function used for response from firebase OAuth.\n   * Store user object returned in firestore.\n   * @param firebase User Credential\n   */\n  const signedIn = async (response: firebase.auth.UserCredential) => {\n    setLoading(false)\n    if (!response.user) {\n      throw new Error('No User')\n    }\n\n    // Format user into my required state.\n    const authedUser = formatAuthState(response.user)\n    // firestore database function\n    createUser(authedUser.uid as string, authedUser)\n  }\n\n  const signedError = async (response: firebase.auth.Error) => {\n    setLoading(false)\n    if (response.code === 'auth/user-not-found') {\n      listErrors.filter(el => el.code === response.code)[0].msg\n      toast.error(listErrors.filter(el => el.code === response.code)[0].msg)\n    }\n  }\n\n  /**\n   * Callback for when firebase signOut.\n   * Sets auth state to null and loading to true.\n   */\n  const clear = () => {\n    setAuth(null)\n    setLoading(false)\n  }\n\n  /**\n   * Triggers firebase Oauth for Google and calls signIn when successful.\n   * sets loading to true.\n   */\n  const signInWithGoogle = () => {\n    setLoading(true)\n    return firebase\n      .auth()\n      .signInWithPopup(new firebase.auth.GoogleAuthProvider())\n      .then(signedIn)\n  }\n\n  /**\n   * Triggers firebase Oauth for E-mail and Password and calls signIn when successful.\n   * sets loading to true.\n   */\n  const signInWithEmailPassword = (email, password) => {\n    setLoading(true)\n    return firebase\n      .auth()\n      .signInWithEmailAndPassword(email, password)\n      .then(signedIn)\n      .catch(signedError)\n  }\n\n  /**\n   * Triggers firebase Oauth for facebook and calls signIn when successful.\n   * sets loading to true.\n   */\n  const signInWithFacebook = () => {\n    setLoading(true)\n    return firebase\n      .auth()\n      .signInWithPopup(new firebase.auth.FacebookAuthProvider())\n      .then(signedIn)\n  }\n\n  /**\n   * Create user with E-mail and Password.\n   * sets loading to true.\n   */\n  const createWithEmailAndPassword = (email, password) => {\n    setLoading(true)\n    return firebase\n      .auth()\n      .createUserWithEmailAndPassword(email, password)\n      .then(signedIn)\n  }\n\n  /**\n   * Calls firebase signOut and with clear callback to reset state.\n   */\n  const signOut = () => {\n    return firebase.auth().signOut().then(clear)\n  }\n\n  /**\n   * Watches for state change for firebase auth and calls the handleAuthChange callback\n   * on every change.\n   */\n  useEffect(() => {\n    const unsubscribe = firebase.auth().onAuthStateChanged(handleAuthChange)\n    return () => unsubscribe()\n  }, [])\n\n  // returns state values and callbacks for signIn and signOut.\n  return {\n    auth,\n    loading,\n    signInWithGoogle,\n    signInWithFacebook,\n    signInWithEmailPassword,\n    createWithEmailAndPassword,\n    signOut\n  }\n}\n\nexport function AuthProvider({ children }: any) {\n  const auth = useProvideAuth()\n  return <authContext.Provider value={auth}>{children}</authContext.Provider>\n}\n\nexport const useAuth = () => useContext(authContext)\n"]},"metadata":{},"sourceType":"module"}