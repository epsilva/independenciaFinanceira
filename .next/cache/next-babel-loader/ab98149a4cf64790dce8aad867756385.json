{"ast":null,"code":"var _jsxFileName = \"/Users/esdraspinheiro/Documents/Projetos/next-independencia-financeira/src/components/FormCalc/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport Button from '@material-ui/core/Button';\nimport { Container, Row, Column } from './styles';\nimport { maskMoney } from '../../components/MaksMoney';\nimport List from './components/List';\nimport Cards from './components/Cards';\nimport TextField from '@material-ui/core/TextField';\n\nconst FormCalc = () => {\n  const {\n    0: lista,\n    1: setLista\n  } = useState([]);\n  const {\n    0: aporteMensal,\n    1: setAporteMensal\n  } = useState('0,00');\n  const {\n    handleSubmit,\n    register,\n    setValue,\n    errors,\n    getValues,\n    control\n  } = useForm();\n\n  const onSubmit = data => {\n    const redimentoMensal = (1 + data.rendimentoAnual / 100) ** (1 / 12) - 1;\n    const listaTemp = [];\n\n    for (let i = 0; i < 360; i++) {\n      if (i === 0) {\n        listaTemp.push({\n          mes: i + 1,\n          rendimento: 0,\n          valorInicial: 0,\n          aporteFinal: parseFloat(aporteMensal.toString().replace('.', '').replace(',', '.'))\n        });\n      } else {\n        const aporteMe = parseFloat(aporteMensal.toString().replace('.', '').replace(',', '.'));\n        const rendimentoAtual = listaTemp[i - 1].aporteFinal * redimentoMensal;\n        listaTemp.push({\n          mes: i + 1,\n          valorInicial: listaTemp[i - 1].aporteFinal,\n          rendimento: rendimentoAtual,\n          aporteFinal: aporteMe + listaTemp[i - 1].aporteFinal + rendimentoAtual\n        });\n      }\n    }\n\n    setLista(listaTemp);\n  };\n\n  function calcAporteMensal() {\n    const salarioMensal = parseFloat(getValues('salarioMensal').toString().replace('.', '').replace(',', '.'));\n    const percentualAporte = parseInt(getValues('percentualAporte').toString()) / 100;\n    const aporteMensal = percentualAporte * salarioMensal;\n\n    if (aporteMensal) {\n      setAporteMensal(maskMoney((aporteMensal * 100).toString()));\n      const rendaRestante = (salarioMensal - aporteMensal) * 100;\n      setValue('rendaRestante', maskMoney(rendaRestante.toString()));\n    } else {\n      setAporteMensal(maskMoney('000'));\n      setValue('rendaRestante', maskMoney('000'));\n    }\n  }\n\n  function onChangeRemunaration(e) {\n    setValue('salarioMensal', maskMoney(e.target.value));\n    calcAporteMensal();\n  }\n\n  function onChangeLimpar() {\n    setValue('salarioMensal', undefined);\n    setValue('percentualAporte', undefined);\n    setValue('rendaRestante', undefined);\n    setValue('rendimentoAnual', undefined);\n    setAporteMensal('0,00');\n    setLista([]);\n  }\n\n  return __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, __jsx(Column, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, __jsx(Controller, {\n    name: \"salarioMensal\",\n    control: control,\n    render: () => __jsx(TextField, {\n      error: errors.salarioMensal !== undefined,\n      id: \"standard-basic\",\n      label: \"Sal\\xE1rio Mensal\",\n      onChange: onChangeRemunaration,\n      placeholder: \"R$ 0,00\",\n      inputRef: register({\n        required: 'Campo obrigatório'\n      }),\n      inputProps: {\n        name: 'salarioMensal'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  })), __jsx(Column, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, __jsx(Controller, {\n    name: \"percentualAporte\",\n    control: control,\n    render: () => __jsx(TextField, {\n      error: errors.percentualAporte !== undefined,\n      id: \"standard-basic\",\n      label: \"Percentual do Aporte\",\n      onChange: calcAporteMensal,\n      type: \"number\",\n      placeholder: \"100%\",\n      inputRef: register({\n        required: 'Campo obrigatório',\n        maxLength: 3\n      }),\n      inputProps: {\n        name: 'percentualAporte',\n        maxlength: '3'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }))), __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, __jsx(Column, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }, __jsx(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }, \"Aporte Mensal\"), __jsx(\"h2\", {\n    style: {\n      color: '#000'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, \"R$ \", aporteMensal)), __jsx(Column, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }\n  }, __jsx(Controller, {\n    name: \"rendimentoAnual\",\n    control: control,\n    render: () => __jsx(TextField, {\n      error: errors.rendimentoAnual !== undefined,\n      id: \"standard-basic\",\n      label: \"Rendimento Anual\",\n      onChange: calcAporteMensal,\n      type: \"number\",\n      placeholder: \"100%\",\n      inputRef: register({\n        required: 'Campo obrigatório',\n        maxLength: 3\n      }),\n      inputProps: {\n        name: 'rendimentoAnual',\n        maxlength: '3'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }\n  }))), __jsx(Row, {\n    style: {\n      justifyContent: 'flex-end'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    type: \"submit\",\n    style: {\n      marginRight: '8px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 11\n    }\n  }, \"Calcular\"), __jsx(Button, {\n    type: \"button\",\n    variant: \"contained\",\n    onClick: onChangeLimpar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 11\n    }\n  }, \"Limpar\"))), lista.length > 0 && __jsx(React.Fragment, null, __jsx(Cards, {\n    lista: lista,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 11\n    }\n  }), __jsx(List, {\n    lista: lista,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default FormCalc;","map":{"version":3,"sources":["/Users/esdraspinheiro/Documents/Projetos/next-independencia-financeira/src/components/FormCalc/index.tsx"],"names":["React","useState","useForm","Controller","Button","Container","Row","Column","maskMoney","List","Cards","TextField","FormCalc","lista","setLista","aporteMensal","setAporteMensal","handleSubmit","register","setValue","errors","getValues","control","onSubmit","data","redimentoMensal","rendimentoAnual","listaTemp","i","push","mes","rendimento","valorInicial","aporteFinal","parseFloat","toString","replace","aporteMe","rendimentoAtual","calcAporteMensal","salarioMensal","percentualAporte","parseInt","rendaRestante","onChangeRemunaration","e","target","value","onChangeLimpar","undefined","required","name","maxLength","maxlength","color","justifyContent","marginRight","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useForm, Controller } from 'react-hook-form'\nimport Button from '@material-ui/core/Button'\nimport { Container, Row, Column } from './styles'\nimport { maskMoney } from '../../components/MaksMoney'\nimport List from './components/List'\nimport Cards from './components/Cards'\nimport { IStateLista, IFormInput } from '../types'\nimport TextField from '@material-ui/core/TextField'\nimport { kMaxLength } from 'buffer'\n\nconst FormCalc: React.FC = () => {\n  const [lista, setLista] = useState<IStateLista[]>([])\n  const [aporteMensal, setAporteMensal] = useState('0,00')\n  const {\n    handleSubmit,\n    register,\n    setValue,\n    errors,\n    getValues,\n    control\n  } = useForm<IFormInput>()\n\n  const onSubmit = (data: IFormInput) => {\n    const redimentoMensal: number =\n      (1 + data.rendimentoAnual / 100) ** (1 / 12) - 1\n    const listaTemp: IStateLista[] = []\n    for (let i = 0; i < 360; i++) {\n      if (i === 0) {\n        listaTemp.push({\n          mes: i + 1,\n          rendimento: 0,\n          valorInicial: 0,\n          aporteFinal: parseFloat(\n            aporteMensal.toString().replace('.', '').replace(',', '.')\n          )\n        })\n      } else {\n        const aporteMe = parseFloat(\n          aporteMensal.toString().replace('.', '').replace(',', '.')\n        )\n        const rendimentoAtual: number =\n          listaTemp[i - 1].aporteFinal * redimentoMensal\n        listaTemp.push({\n          mes: i + 1,\n          valorInicial: listaTemp[i - 1].aporteFinal,\n          rendimento: rendimentoAtual,\n          aporteFinal: aporteMe + listaTemp[i - 1].aporteFinal + rendimentoAtual\n        })\n      }\n    }\n    setLista(listaTemp)\n  }\n\n  function calcAporteMensal() {\n    const salarioMensal: number = parseFloat(\n      getValues('salarioMensal').toString().replace('.', '').replace(',', '.')\n    )\n    const percentualAporte: number =\n      parseInt(getValues('percentualAporte').toString()) / 100\n    const aporteMensal: number = percentualAporte * salarioMensal\n\n    if (aporteMensal) {\n      setAporteMensal(maskMoney((aporteMensal * 100).toString()))\n      const rendaRestante = (salarioMensal - aporteMensal) * 100\n      setValue('rendaRestante', maskMoney(rendaRestante.toString()))\n    } else {\n      setAporteMensal(maskMoney('000'))\n      setValue('rendaRestante', maskMoney('000'))\n    }\n  }\n\n  function onChangeRemunaration(e) {\n    setValue('salarioMensal', maskMoney(e.target.value))\n    calcAporteMensal()\n  }\n\n  function onChangeLimpar() {\n    setValue('salarioMensal', undefined)\n    setValue('percentualAporte', undefined)\n    setValue('rendaRestante', undefined)\n    setValue('rendimentoAnual', undefined)\n    setAporteMensal('0,00')\n    setLista([])\n  }\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Container>\n        <Row>\n          <Column>\n            <Controller\n              name=\"salarioMensal\"\n              control={control}\n              render={() => (\n                <TextField\n                  error={errors.salarioMensal !== undefined}\n                  id=\"standard-basic\"\n                  label=\"Salário Mensal\"\n                  onChange={onChangeRemunaration}\n                  placeholder=\"R$ 0,00\"\n                  inputRef={register({\n                    required: 'Campo obrigatório'\n                  })}\n                  inputProps={{\n                    name: 'salarioMensal'\n                  }}\n                />\n              )}\n            />\n          </Column>\n          <Column>\n            <Controller\n              name=\"percentualAporte\"\n              control={control}\n              render={() => (\n                <TextField\n                  error={errors.percentualAporte !== undefined}\n                  id=\"standard-basic\"\n                  label=\"Percentual do Aporte\"\n                  onChange={calcAporteMensal}\n                  type=\"number\"\n                  placeholder=\"100%\"\n                  inputRef={register({\n                    required: 'Campo obrigatório',\n                    maxLength: 3\n                  })}\n                  inputProps={{\n                    name: 'percentualAporte',\n                    maxlength: '3'\n                  }}\n                />\n              )}\n            />\n          </Column>\n        </Row>\n        <Row>\n          <Column>\n            <label>Aporte Mensal</label>\n            <h2 style={{ color: '#000' }}>R$ {aporteMensal}</h2>\n          </Column>\n          <Column>\n            <Controller\n              name=\"rendimentoAnual\"\n              control={control}\n              render={() => (\n                <TextField\n                  error={errors.rendimentoAnual !== undefined}\n                  id=\"standard-basic\"\n                  label=\"Rendimento Anual\"\n                  onChange={calcAporteMensal}\n                  type=\"number\"\n                  placeholder=\"100%\"\n                  inputRef={register({\n                    required: 'Campo obrigatório',\n                    maxLength: 3\n                  })}\n                  inputProps={{\n                    name: 'rendimentoAnual',\n                    maxlength: '3'\n                  }}\n                />\n              )}\n            />\n          </Column>\n        </Row>\n        <Row style={{ justifyContent: 'flex-end' }}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"submit\"\n            style={{ marginRight: '8px' }}\n          >\n            Calcular\n          </Button>\n          <Button type=\"button\" variant=\"contained\" onClick={onChangeLimpar}>\n            Limpar\n          </Button>\n        </Row>\n      </Container>\n      {lista.length > 0 && (\n        <>\n          <Cards lista={lista} />\n          <List lista={lista} />\n        </>\n      )}\n    </form>\n  )\n}\n\nexport default FormCalc\n"]},"metadata":{},"sourceType":"module"}