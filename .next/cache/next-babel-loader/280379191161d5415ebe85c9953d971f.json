{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport Button from '@material-ui/core/Button';\nimport { Container, Row, Column } from './styles';\nimport { maskMoney } from '../MaksMoney';\nimport { maskDecimal } from '../MaskDecimal';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp';\nimport DateRange from '@material-ui/icons/DateRange';\nimport Info from '../Info';\nimport Card from './components/Card';\nimport LineChart from '../Charts/LineChart';\n\nvar FormCalcJurosCompostos = function FormCalcJurosCompostos() {\n  var _useState = useState([]),\n      lista = _useState[0],\n      setLista = _useState[1];\n\n  var _useState2 = useState(true),\n      showModal = _useState2[0],\n      setShowModal = _useState2[1];\n\n  var _useForm = useForm({\n    defaultValues: {\n      valorInicial: null,\n      valorMensal: null,\n      taxaJuros: null,\n      tempoMeses: null\n    }\n  }),\n      handleSubmit = _useForm.handleSubmit,\n      register = _useForm.register,\n      setValue = _useForm.setValue,\n      errors = _useForm.errors,\n      getValues = _useForm.getValues,\n      control = _useForm.control;\n\n  var _useState3 = useState(),\n      labels = _useState3[0],\n      setLabels = _useState3[1];\n\n  var _useState4 = useState(),\n      dataSet = _useState4[0],\n      setDataSet = _useState4[1];\n\n  var castFloat = function castFloat(valor) {\n    return parseFloat(valor.toString().replace('.', '').replace(',', '.'));\n  };\n\n  var castInt = function castInt(valor) {\n    return parseInt(valor.toString());\n  };\n\n  var onSubmit = function onSubmit(data) {\n    var valorInicial = castFloat(data.valorInicial);\n    var valorMensal = castFloat(data.valorMensal);\n    var taxaJuros = castFloat(data.taxaJuros);\n    var tempoMeses = castInt(data.tempoMeses);\n    var investimentoAcumulado = valorInicial;\n    var totalInvestimentoAcumulado = valorInicial + valorMensal * tempoMeses;\n    var jurosCompostos = 0;\n    var jurosCompostosTotal = 0;\n    var listaCalc = [];\n    var labelsLine = [];\n    var dataLine1 = [];\n    var dataLine2 = [];\n\n    for (var i = 0; i < tempoMeses; i++) {\n      jurosCompostos = investimentoAcumulado * taxaJuros / 100;\n      jurosCompostosTotal += jurosCompostos;\n      investimentoAcumulado += jurosCompostos + valorMensal;\n      listaCalc.push({\n        mes: i,\n        rendimento: jurosCompostosTotal,\n        total: investimentoAcumulado,\n        totalInvestido: totalInvestimentoAcumulado / (tempoMeses / i)\n      });\n      var ms = new Date().getTime() + 2592000000 * i;\n      var now = new Date(ms);\n      labelsLine.push(\"\".concat(now.getMonth() + 1, \"/\").concat(now.getFullYear()));\n      dataLine2.push(investimentoAcumulado);\n      dataLine1.push(totalInvestimentoAcumulado / (tempoMeses / i));\n    }\n\n    setLista(listaCalc);\n    setLabels(labelsLine);\n    setDataSet([{\n      label: 'Total Investido',\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: 'rgba(75,192,192,0.4)',\n      borderColor: 'rgba(75,192,192,1)',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'rgba(75,192,192,1)',\n      pointBackgroundColor: '#fff',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: dataLine1\n    }, {\n      label: 'Total Acumulado',\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: 'rgba(75,192,192,0.4)',\n      borderColor: '#36A2EB',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: '#36A2EB',\n      pointBackgroundColor: '#fff',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: '#36A2EB',\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: dataLine2\n    }]); // var valorReceber = totalInvestimentoAcumulado + jurosCompostosTotal\n  };\n\n  function onChangeLimpar() {\n    setValue('valorInicial', undefined);\n    setValue('valorMensal', undefined);\n    setValue('taxaJuros', undefined);\n    setValue('tempoMeses', undefined);\n    setLista([]);\n    setLabels([]);\n    setDataSet([]);\n  }\n\n  function onChangeValorInicial(e) {\n    setValue('valorInicial', maskMoney(e.target.value));\n  }\n\n  function onChangeValorMensal(e) {\n    setValue('valorMensal', maskMoney(e.target.value));\n  }\n\n  function onChangeTaxaJuros(e) {\n    setValue('taxaJuros', maskDecimal(e === null || e === void 0 ? void 0 : e.target.value));\n  }\n\n  useEffect(function () {\n    onChangeLimpar();\n    setShowModal(localStorage.getItem(window.location.pathname) === null);\n  }, []);\n  return __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit)\n  }, __jsx(Container, null, showModal && __jsx(Info, null, __jsx(\"h1\", null, \"Aviso!\"), __jsx(\"h3\", null, \"Esta calculadora far\\xE1 uma simula\\xE7\\xE3o de 30 anos.\"), __jsx(\"p\", null, \"Voc\\xEA colocar\\xE1 seus ganhos mensais (Sal\\xE1rio Mensal) e o percentual que voc\\xEA economizar\\xE1 (Percentual do Aporte) para ter a renda que voc\\xEA j\\xE1 recebe e o rendimento anual esperado (Rendimento Anual).\")), __jsx(Row, null, __jsx(Column, null, __jsx(Controller, {\n    name: \"valorInicial\",\n    control: control,\n    render: function render() {\n      return __jsx(TextField, {\n        error: errors.valorInicial !== undefined,\n        id: \"standard-basic\",\n        size: \"small\",\n        fullWidth: true,\n        label: \"Aporte Inicial\",\n        placeholder: \"0,00\",\n        onChange: onChangeValorInicial,\n        inputRef: register({\n          required: 'Campo obrigat贸rio'\n        }),\n        InputProps: {\n          name: 'valorInicial',\n          startAdornment: __jsx(InputAdornment, {\n            position: \"start\"\n          }, \"R$\")\n        }\n      });\n    }\n  })), __jsx(Column, null, __jsx(Controller, {\n    name: \"valorMensal\",\n    control: control,\n    render: function render() {\n      return __jsx(TextField, {\n        error: errors.valorMensal !== undefined,\n        id: \"standard-basic\",\n        label: \"Aporte Mensal\",\n        placeholder: \"0,00\",\n        size: \"small\",\n        fullWidth: true,\n        onChange: onChangeValorMensal,\n        inputRef: register({\n          required: 'Campo obrigat贸rio'\n        }),\n        inputProps: {\n          name: 'valorMensal'\n        },\n        InputProps: {\n          startAdornment: __jsx(InputAdornment, {\n            position: \"start\"\n          }, \"R$\")\n        }\n      });\n    }\n  }))), __jsx(Row, null, __jsx(Column, null, __jsx(Controller, {\n    name: \"taxaJuros\",\n    control: control,\n    render: function render() {\n      return __jsx(TextField, {\n        error: errors.taxaJuros !== undefined,\n        id: \"standard-basic\",\n        label: \"Taxa Juros Mensal\",\n        placeholder: \"100%\",\n        onChange: onChangeTaxaJuros,\n        inputRef: register({\n          required: 'Campo obrigat贸rio',\n          maxLength: 6\n        }),\n        size: \"small\",\n        fullWidth: true,\n        inputProps: {\n          maxLength: 6,\n          name: 'taxaJuros'\n        },\n        InputProps: {\n          name: 'taxaJuros',\n          startAdornment: __jsx(InputAdornment, {\n            position: \"start\"\n          }, __jsx(TrendingUpIcon, null))\n        }\n      });\n    }\n  })), __jsx(Column, null, __jsx(Controller, {\n    name: \"tempoMeses\",\n    control: control,\n    render: function render() {\n      return __jsx(TextField, {\n        error: errors.tempoMeses !== undefined,\n        id: \"standard-basic\",\n        label: \"Tempo em meses\",\n        placeholder: \"360\",\n        inputRef: register({\n          required: 'Campo obrigat贸rio',\n          maxLength: 3\n        }),\n        size: \"small\",\n        fullWidth: true,\n        inputProps: {\n          maxLength: 3\n        },\n        InputProps: {\n          name: 'tempoMeses',\n          startAdornment: __jsx(InputAdornment, {\n            position: \"start\"\n          }, __jsx(DateRange, null))\n        }\n      });\n    }\n  }))), __jsx(Row, {\n    style: {\n      justifyContent: 'flex-end'\n    }\n  }, __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    type: \"submit\",\n    style: {\n      marginRight: '8px'\n    },\n    fullWidth: true\n  }, \"Calcular\"), __jsx(Button, {\n    type: \"button\",\n    variant: \"contained\",\n    onClick: onChangeLimpar,\n    fullWidth: true\n  }, \"Limpar\"))), lista.length > 0 && __jsx(React.Fragment, null, __jsx(Card, {\n    formJuros: lista[lista.length - 1]\n  }), __jsx(LineChart, {\n    labels: labels,\n    dataSet: dataSet\n  })));\n};\n\nexport default FormCalcJurosCompostos;","map":null,"metadata":{},"sourceType":"module"}