{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect, useState } from 'react';\nimport { motion, useCycle } from 'framer-motion';\nimport { useDimensions } from './use-dimensions';\nimport { MenuToggle } from './MenuToggle';\nimport { Navigation } from './Navigation';\nimport { Nav } from './styles';\nvar sidebar = {\n  open: function open() {\n    var height = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;\n    return {\n      clipPath: \"circle(\".concat(height * 2 + 200, \"px at 40px 40px)\"),\n      transition: {\n        type: 'spring',\n        stiffness: 20,\n        restDelta: 2\n      }\n    };\n  },\n  closed: {\n    clipPath: 'circle(30px at 40px 40px)',\n    transition: {\n      delay: 0.5,\n      type: 'spring',\n      stiffness: 400,\n      damping: 40\n    }\n  }\n};\n\nvar Menu = function Menu() {\n  var _useCycle = useCycle(false, true),\n      _useCycle2 = _slicedToArray(_useCycle, 2),\n      isOpen = _useCycle2[0],\n      toggleOpen = _useCycle2[1];\n\n  var containerRef = useRef(null);\n\n  var _useDimensions = useDimensions(containerRef),\n      height = _useDimensions.height;\n\n  var _useState = useState(false),\n      open = _useState[0],\n      setOpen = _useState[1];\n\n  useEffect(function () {\n    if (!isOpen) {\n      setTimeout(function () {\n        setOpen(isOpen);\n      }, 1000);\n    } else {\n      setOpen(isOpen);\n    }\n  }, [isOpen]);\n  return __jsx(Nav, {\n    style: {\n      position: isOpen ? 'inherit' : 'absolute'\n    },\n    initial: false,\n    animate: isOpen ? 'open' : 'closed',\n    custom: height,\n    ref: containerRef\n  }, __jsx(motion.div, {\n    className: \"background\",\n    variants: sidebar\n  }), __jsx(Navigation, null), __jsx(MenuToggle, {\n    toggle: function toggle() {\n      return toggleOpen();\n    }\n  }));\n};\n\nexport default Menu;","map":null,"metadata":{},"sourceType":"module"}