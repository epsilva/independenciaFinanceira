{"ast":null,"code":"var _jsxFileName = \"/Users/esdraspinheiro/Documents/Projetos/next-independencia-financeira/src/components/FormCalcPorSalario/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport Button from '@material-ui/core/Button';\nimport { Container, Row, Column } from './styles';\nimport { maskMoney } from '../MaksMoney';\nimport { maskDecimal } from '../MaskDecimal';\nimport TextField from '@material-ui/core/TextField';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp';\nimport MoneyIcon from '@material-ui/icons/Money';\nimport Info from '../Info';\nimport LineChart from '../Charts/LineChart';\n\nconst FormCalcPorSalario = () => {\n  const {\n    0: lista,\n    1: setLista\n  } = useState([]);\n  const {\n    0: aporteMensal,\n    1: setAporteMensal\n  } = useState('0,00');\n  const {\n    0: showModal,\n    1: setShowModal\n  } = useState(true);\n  const {\n    0: datas,\n    1: setDatas\n  } = useState({});\n  const {\n    handleSubmit,\n    register,\n    setValue,\n    errors,\n    getValues,\n    control\n  } = useForm({\n    defaultValues: {\n      salarioMensal: null,\n      percentualAporte: null,\n      rendimentoAnual: null\n    }\n  });\n\n  const onSubmit = data => {\n    const rendimentoAnual = parseFloat(data.rendimentoAnual.toString().replace(',', '.'));\n    const redimentoMensal = (1 + rendimentoAnual / 100) ** (1 / 12) - 1;\n    const listaTemp = [];\n    let ano = 12;\n    const labels = [];\n    const dataLine = [];\n\n    for (let i = 0; i < 360; i++) {\n      if (i === 0) {\n        listaTemp.push({\n          mes: i + 1,\n          rendimento: 0,\n          valorInicial: 0,\n          aporteFinal: parseFloat(aporteMensal.toString().replace('.', '').replace(',', '.'))\n        });\n      } else {\n        const aporteMe = parseFloat(aporteMensal.toString().replace('.', '').replace(',', '.'));\n        const rendimentoAtual = listaTemp[i - 1].aporteFinal * redimentoMensal;\n        listaTemp.push({\n          mes: i + 1,\n          valorInicial: listaTemp[i - 1].aporteFinal,\n          rendimento: rendimentoAtual,\n          aporteFinal: aporteMe + listaTemp[i - 1].aporteFinal + rendimentoAtual\n        });\n\n        if (ano === i + 1) {\n          labels.push(`Ano ${ano / 12}`);\n          dataLine.push(aporteMe + listaTemp[i - 1].aporteFinal + rendimentoAtual);\n          ano = ano + 12;\n        }\n      }\n    } // const datasets = [\n    //   {\n    //     label: 'Evolução Patrimônial',\n    //     fill: false,\n    //     lineTension: 0.1,\n    //     backgroundColor: 'rgba(75,192,192,0.4)',\n    //     borderColor: 'rgba(75,192,192,1)',\n    //     borderCapStyle: 'butt',\n    //     borderDash: [],\n    //     borderDashOffset: 0.0,\n    //     borderJoinStyle: 'miter',\n    //     pointBorderColor: 'rgba(75,192,192,1)',\n    //     pointBackgroundColor: '#fff',\n    //     pointBorderWidth: 1,\n    //     pointHoverRadius: 5,\n    //     pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n    //     pointHoverBorderColor: 'rgba(220,220,220,1)',\n    //     pointHoverBorderWidth: 2,\n    //     pointRadius: 1,\n    //     pointHitRadius: 10,\n    //     dataLine\n    //   }\n    // ]\n\n\n    setDatas({\n      labels,\n      datasets: [{\n        label: 'Evolução Patrimônial',\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: 'rgba(75,192,192,0.4)',\n        borderColor: 'rgba(75,192,192,1)',\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        dataLine\n      }]\n    }); // setLista(listaTemp)\n  };\n\n  function calcAporteMensal(e) {\n    if ((e === null || e === void 0 ? void 0 : e.target.name) === 'percentualAporte') {\n      setValue('percentualAporte', maskDecimal(e === null || e === void 0 ? void 0 : e.target.value));\n    }\n\n    if ((e === null || e === void 0 ? void 0 : e.target.name) === 'rendimentoAnual') {\n      setValue('rendimentoAnual', maskDecimal(e === null || e === void 0 ? void 0 : e.target.value));\n    }\n\n    const salarioMensal = parseFloat(getValues('salarioMensal').toString().replace('.', '').replace(',', '.'));\n    const percentualAporte = parseFloat(getValues('percentualAporte').toString().replace(',', '.')) / 100;\n    const aporteMensal = percentualAporte * salarioMensal;\n\n    if (aporteMensal) {\n      setAporteMensal(maskMoney(Number(aporteMensal).toFixed(2).toString()));\n    } else {\n      setAporteMensal(maskMoney('000'));\n    }\n  }\n\n  function onChangeRemunaration(e) {\n    setValue('salarioMensal', maskMoney(e.target.value));\n    calcAporteMensal(undefined);\n  }\n\n  function onChangeLimpar() {\n    setValue('salarioMensal', undefined);\n    setValue('percentualAporte', undefined);\n    setValue('rendimentoAnual', undefined);\n    setAporteMensal('0,00');\n    setLista([]);\n  }\n\n  useEffect(() => {\n    onChangeLimpar();\n    setShowModal(localStorage.getItem(window.location.pathname) === null);\n  }, []);\n  return __jsx(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 5\n    }\n  }, __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }\n  }, showModal && __jsx(Info, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 11\n    }\n  }, __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }\n  }, \"Aviso!\"), __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }\n  }, \"Esta calculadora far\\xE1 uma simula\\xE7\\xE3o de 30 anos.\"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }\n  }, \"Voc\\xEA colocar\\xE1 seus ganhos mensais (Sal\\xE1rio Mensal) e o percentual que voc\\xEA economizar\\xE1 (Percentual do Aporte) para ter a renda que voc\\xEA j\\xE1 recebe e o rendimento anual esperado (Rendimento Anual).\")), __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }, __jsx(Column, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 11\n    }\n  }, __jsx(Controller, {\n    name: \"salarioMensal\",\n    control: control,\n    render: () => __jsx(TextField, {\n      error: errors.salarioMensal !== undefined,\n      id: \"standard-basic\",\n      size: \"small\",\n      fullWidth: true,\n      label: \"Sal\\xE1rio Mensal\",\n      onChange: onChangeRemunaration,\n      placeholder: \"0,00\",\n      inputRef: register({\n        required: 'Campo obrigatório'\n      }),\n      InputProps: {\n        name: 'salarioMensal',\n        startAdornment: __jsx(InputAdornment, {\n          position: \"start\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 23\n          }\n        }, \"R$\")\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 17\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }\n  })), __jsx(Column, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 11\n    }\n  }, __jsx(Controller, {\n    name: \"percentualAporte\",\n    control: control,\n    render: () => __jsx(TextField, {\n      error: errors.percentualAporte !== undefined,\n      id: \"standard-basic\",\n      label: \"Percentual do Aporte\",\n      onChange: calcAporteMensal,\n      placeholder: \"100%\",\n      size: \"small\",\n      fullWidth: true,\n      inputRef: register({\n        required: 'Campo obrigatório',\n        maxLength: 6\n      }),\n      inputProps: {\n        maxLength: 6,\n        name: 'percentualAporte'\n      },\n      InputProps: {\n        startAdornment: __jsx(InputAdornment, {\n          position: \"start\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 23\n          }\n        }, __jsx(MoneyIcon, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 25\n          }\n        }))\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 17\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 13\n    }\n  }))), __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 9\n    }\n  }, __jsx(Column, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 11\n    }\n  }, __jsx(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }\n  }, \"Aporte Mensal\"), __jsx(\"h2\", {\n    style: {\n      color: '#000'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 13\n    }\n  }, \"R$ \", aporteMensal)), __jsx(Column, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 11\n    }\n  }, __jsx(Controller, {\n    name: \"rendimentoAnual\",\n    control: control,\n    render: () => __jsx(TextField, {\n      error: errors.rendimentoAnual !== undefined,\n      id: \"standard-basic\",\n      label: \"Rendimento Anual\",\n      onChange: calcAporteMensal,\n      placeholder: \"100%\",\n      inputRef: register({\n        required: 'Campo obrigatório',\n        maxLength: 6\n      }),\n      size: \"small\",\n      fullWidth: true,\n      inputProps: {\n        maxLength: 6\n      },\n      InputProps: {\n        name: 'rendimentoAnual',\n        startAdornment: __jsx(InputAdornment, {\n          position: \"start\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 23\n          }\n        }, __jsx(TrendingUpIcon, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 25\n          }\n        }))\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 17\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 13\n    }\n  }))), __jsx(Row, {\n    style: {\n      justifyContent: 'flex-end'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    type: \"submit\",\n    style: {\n      marginRight: '8px'\n    },\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 11\n    }\n  }, \"Calcular\"), __jsx(Button, {\n    type: \"button\",\n    variant: \"contained\",\n    onClick: onChangeLimpar,\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 11\n    }\n  }, \"Limpar\"))), datas.labels && __jsx(LineChart, {\n    data: datas,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 24\n    }\n  }), lista.length > 0 && __jsx(React.Fragment, null));\n};\n\nexport default FormCalcPorSalario;","map":{"version":3,"sources":["/Users/esdraspinheiro/Documents/Projetos/next-independencia-financeira/src/components/FormCalcPorSalario/index.tsx"],"names":["React","useEffect","useState","useForm","Controller","Button","Container","Row","Column","maskMoney","maskDecimal","TextField","InputAdornment","TrendingUpIcon","MoneyIcon","Info","LineChart","FormCalcPorSalario","lista","setLista","aporteMensal","setAporteMensal","showModal","setShowModal","datas","setDatas","handleSubmit","register","setValue","errors","getValues","control","defaultValues","salarioMensal","percentualAporte","rendimentoAnual","onSubmit","data","parseFloat","toString","replace","redimentoMensal","listaTemp","ano","labels","dataLine","i","push","mes","rendimento","valorInicial","aporteFinal","aporteMe","rendimentoAtual","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","calcAporteMensal","e","target","name","value","Number","toFixed","onChangeRemunaration","undefined","onChangeLimpar","localStorage","getItem","window","location","pathname","required","startAdornment","maxLength","color","justifyContent","marginRight","length"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,iBAApC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,MAAzB,QAAuC,UAAvC;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAIA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;;AAEA,MAAMC,kBAA4B,GAAG,MAAM;AACzC,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBjB,QAAQ,CAAgB,EAAhB,CAAlC;AACA,QAAM;AAAA,OAACkB,YAAD;AAAA,OAAeC;AAAf,MAAkCnB,QAAQ,CAAC,MAAD,CAAhD;AACA,QAAM;AAAA,OAACoB,SAAD;AAAA,OAAYC;AAAZ,MAA4BrB,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM;AAAA,OAACsB,KAAD;AAAA,OAAQC;AAAR,MAAoBvB,QAAQ,CAAe,EAAf,CAAlC;AACA,QAAM;AACJwB,IAAAA,YADI;AAEJC,IAAAA,QAFI;AAGJC,IAAAA,QAHI;AAIJC,IAAAA,MAJI;AAKJC,IAAAA,SALI;AAMJC,IAAAA;AANI,MAOF5B,OAAO,CAAa;AACtB6B,IAAAA,aAAa,EAAE;AACbC,MAAAA,aAAa,EAAE,IADF;AAEbC,MAAAA,gBAAgB,EAAE,IAFL;AAGbC,MAAAA,eAAe,EAAE;AAHJ;AADO,GAAb,CAPX;;AAeA,QAAMC,QAAQ,GAAIC,IAAD,IAAsB;AACrC,UAAMF,eAAe,GAAGG,UAAU,CAChCD,IAAI,CAACF,eAAL,CAAqBI,QAArB,GAAgCC,OAAhC,CAAwC,GAAxC,EAA6C,GAA7C,CADgC,CAAlC;AAGA,UAAMC,eAAuB,GAAG,CAAC,IAAIN,eAAe,GAAG,GAAvB,MAAgC,IAAI,EAApC,IAA0C,CAA1E;AACA,UAAMO,SAAwB,GAAG,EAAjC;AACA,QAAIC,GAAG,GAAG,EAAV;AACA,UAAMC,MAAM,GAAG,EAAf;AACA,UAAMC,QAAQ,GAAG,EAAjB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,GAApB,EAAyBA,CAAC,EAA1B,EAA8B;AAC5B,UAAIA,CAAC,KAAK,CAAV,EAAa;AACXJ,QAAAA,SAAS,CAACK,IAAV,CAAe;AACbC,UAAAA,GAAG,EAAEF,CAAC,GAAG,CADI;AAEbG,UAAAA,UAAU,EAAE,CAFC;AAGbC,UAAAA,YAAY,EAAE,CAHD;AAIbC,UAAAA,WAAW,EAAEb,UAAU,CACrBlB,YAAY,CAACmB,QAAb,GAAwBC,OAAxB,CAAgC,GAAhC,EAAqC,EAArC,EAAyCA,OAAzC,CAAiD,GAAjD,EAAsD,GAAtD,CADqB;AAJV,SAAf;AAQD,OATD,MASO;AACL,cAAMY,QAAQ,GAAGd,UAAU,CACzBlB,YAAY,CAACmB,QAAb,GAAwBC,OAAxB,CAAgC,GAAhC,EAAqC,EAArC,EAAyCA,OAAzC,CAAiD,GAAjD,EAAsD,GAAtD,CADyB,CAA3B;AAGA,cAAMa,eAAuB,GAC3BX,SAAS,CAACI,CAAC,GAAG,CAAL,CAAT,CAAiBK,WAAjB,GAA+BV,eADjC;AAEAC,QAAAA,SAAS,CAACK,IAAV,CAAe;AACbC,UAAAA,GAAG,EAAEF,CAAC,GAAG,CADI;AAEbI,UAAAA,YAAY,EAAER,SAAS,CAACI,CAAC,GAAG,CAAL,CAAT,CAAiBK,WAFlB;AAGbF,UAAAA,UAAU,EAAEI,eAHC;AAIbF,UAAAA,WAAW,EAAEC,QAAQ,GAAGV,SAAS,CAACI,CAAC,GAAG,CAAL,CAAT,CAAiBK,WAA5B,GAA0CE;AAJ1C,SAAf;;AAOA,YAAIV,GAAG,KAAKG,CAAC,GAAG,CAAhB,EAAmB;AACjBF,UAAAA,MAAM,CAACG,IAAP,CAAa,OAAMJ,GAAG,GAAG,EAAG,EAA5B;AACAE,UAAAA,QAAQ,CAACE,IAAT,CACEK,QAAQ,GAAGV,SAAS,CAACI,CAAC,GAAG,CAAL,CAAT,CAAiBK,WAA5B,GAA0CE,eAD5C;AAGAV,UAAAA,GAAG,GAAGA,GAAG,GAAG,EAAZ;AACD;AACF;AACF,KAxCoC,CAyCrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAlB,IAAAA,QAAQ,CAAC;AACPmB,MAAAA,MADO;AAEPU,MAAAA,QAAQ,EAAE,CACR;AACEC,QAAAA,KAAK,EAAE,sBADT;AAEEC,QAAAA,IAAI,EAAE,KAFR;AAGEC,QAAAA,WAAW,EAAE,GAHf;AAIEC,QAAAA,eAAe,EAAE,sBAJnB;AAKEC,QAAAA,WAAW,EAAE,oBALf;AAMEC,QAAAA,cAAc,EAAE,MANlB;AAOEC,QAAAA,UAAU,EAAE,EAPd;AAQEC,QAAAA,gBAAgB,EAAE,GARpB;AASEC,QAAAA,eAAe,EAAE,OATnB;AAUEC,QAAAA,gBAAgB,EAAE,oBAVpB;AAWEC,QAAAA,oBAAoB,EAAE,MAXxB;AAYEC,QAAAA,gBAAgB,EAAE,CAZpB;AAaEC,QAAAA,gBAAgB,EAAE,CAbpB;AAcEC,QAAAA,yBAAyB,EAAE,oBAd7B;AAeEC,QAAAA,qBAAqB,EAAE,qBAfzB;AAgBEC,QAAAA,qBAAqB,EAAE,CAhBzB;AAiBEC,QAAAA,WAAW,EAAE,CAjBf;AAkBEC,QAAAA,cAAc,EAAE,EAlBlB;AAmBE3B,QAAAA;AAnBF,OADQ;AAFH,KAAD,CAAR,CAhEqC,CA0FrC;AACD,GA3FD;;AA6FA,WAAS4B,gBAAT,CAA0BC,CAA1B,EAA6B;AAC3B,QAAI,CAAAA,CAAC,SAAD,IAAAA,CAAC,WAAD,YAAAA,CAAC,CAAEC,MAAH,CAAUC,IAAV,MAAmB,kBAAvB,EAA2C;AACzChD,MAAAA,QAAQ,CAAC,kBAAD,EAAqBlB,WAAW,CAACgE,CAAD,aAACA,CAAD,uBAACA,CAAC,CAAEC,MAAH,CAAUE,KAAX,CAAhC,CAAR;AACD;;AACD,QAAI,CAAAH,CAAC,SAAD,IAAAA,CAAC,WAAD,YAAAA,CAAC,CAAEC,MAAH,CAAUC,IAAV,MAAmB,iBAAvB,EAA0C;AACxChD,MAAAA,QAAQ,CAAC,iBAAD,EAAoBlB,WAAW,CAACgE,CAAD,aAACA,CAAD,uBAACA,CAAC,CAAEC,MAAH,CAAUE,KAAX,CAA/B,CAAR;AACD;;AAED,UAAM5C,aAAqB,GAAGK,UAAU,CACtCR,SAAS,CAAC,eAAD,CAAT,CAA2BS,QAA3B,GAAsCC,OAAtC,CAA8C,GAA9C,EAAmD,EAAnD,EAAuDA,OAAvD,CAA+D,GAA/D,EAAoE,GAApE,CADsC,CAAxC;AAGA,UAAMN,gBAAwB,GAC5BI,UAAU,CAACR,SAAS,CAAC,kBAAD,CAAT,CAA8BS,QAA9B,GAAyCC,OAAzC,CAAiD,GAAjD,EAAsD,GAAtD,CAAD,CAAV,GACA,GAFF;AAGA,UAAMpB,YAAoB,GAAGc,gBAAgB,GAAGD,aAAhD;;AAEA,QAAIb,YAAJ,EAAkB;AAChBC,MAAAA,eAAe,CAACZ,SAAS,CAACqE,MAAM,CAAC1D,YAAD,CAAN,CAAqB2D,OAArB,CAA6B,CAA7B,EAAgCxC,QAAhC,EAAD,CAAV,CAAf;AACD,KAFD,MAEO;AACLlB,MAAAA,eAAe,CAACZ,SAAS,CAAC,KAAD,CAAV,CAAf;AACD;AACF;;AAED,WAASuE,oBAAT,CAA8BN,CAA9B,EAAiC;AAC/B9C,IAAAA,QAAQ,CAAC,eAAD,EAAkBnB,SAAS,CAACiE,CAAC,CAACC,MAAF,CAASE,KAAV,CAA3B,CAAR;AACAJ,IAAAA,gBAAgB,CAACQ,SAAD,CAAhB;AACD;;AAED,WAASC,cAAT,GAA0B;AACxBtD,IAAAA,QAAQ,CAAC,eAAD,EAAkBqD,SAAlB,CAAR;AACArD,IAAAA,QAAQ,CAAC,kBAAD,EAAqBqD,SAArB,CAAR;AACArD,IAAAA,QAAQ,CAAC,iBAAD,EAAoBqD,SAApB,CAAR;AACA5D,IAAAA,eAAe,CAAC,MAAD,CAAf;AACAF,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACD;;AAEDlB,EAAAA,SAAS,CAAC,MAAM;AACdiF,IAAAA,cAAc;AACd3D,IAAAA,YAAY,CAAC4D,YAAY,CAACC,OAAb,CAAqBC,MAAM,CAACC,QAAP,CAAgBC,QAArC,MAAmD,IAApD,CAAZ;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA,SACE;AAAM,IAAA,QAAQ,EAAE7D,YAAY,CAACU,QAAD,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGd,SAAS,IACR,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gEAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gOAHF,CAFJ,EAYE,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AACE,IAAA,IAAI,EAAC,eADP;AAEE,IAAA,OAAO,EAAES,OAFX;AAGE,IAAA,MAAM,EAAE,MACN,MAAC,SAAD;AACE,MAAA,KAAK,EAAEF,MAAM,CAACI,aAAP,KAAyBgD,SADlC;AAEE,MAAA,EAAE,EAAC,gBAFL;AAGE,MAAA,IAAI,EAAC,OAHP;AAIE,MAAA,SAAS,MAJX;AAKE,MAAA,KAAK,EAAC,mBALR;AAME,MAAA,QAAQ,EAAED,oBANZ;AAOE,MAAA,WAAW,EAAC,MAPd;AAQE,MAAA,QAAQ,EAAErD,QAAQ,CAAC;AACjB6D,QAAAA,QAAQ,EAAE;AADO,OAAD,CARpB;AAWE,MAAA,UAAU,EAAE;AACVZ,QAAAA,IAAI,EAAE,eADI;AAEVa,QAAAA,cAAc,EACZ,MAAC,cAAD;AAAgB,UAAA,QAAQ,EAAC,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHQ,OAXd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EA2BE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AACE,IAAA,IAAI,EAAC,kBADP;AAEE,IAAA,OAAO,EAAE1D,OAFX;AAGE,IAAA,MAAM,EAAE,MACN,MAAC,SAAD;AACE,MAAA,KAAK,EAAEF,MAAM,CAACK,gBAAP,KAA4B+C,SADrC;AAEE,MAAA,EAAE,EAAC,gBAFL;AAGE,MAAA,KAAK,EAAC,sBAHR;AAIE,MAAA,QAAQ,EAAER,gBAJZ;AAKE,MAAA,WAAW,EAAC,MALd;AAME,MAAA,IAAI,EAAC,OANP;AAOE,MAAA,SAAS,MAPX;AAQE,MAAA,QAAQ,EAAE9C,QAAQ,CAAC;AACjB6D,QAAAA,QAAQ,EAAE,mBADO;AAEjBE,QAAAA,SAAS,EAAE;AAFM,OAAD,CARpB;AAYE,MAAA,UAAU,EAAE;AACVA,QAAAA,SAAS,EAAE,CADD;AAEVd,QAAAA,IAAI,EAAE;AAFI,OAZd;AAgBE,MAAA,UAAU,EAAE;AACVa,QAAAA,cAAc,EACZ,MAAC,cAAD;AAAgB,UAAA,QAAQ,EAAC,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAFQ,OAhBd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CA3BF,CAZF,EAwEE,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE;AAAI,IAAA,KAAK,EAAE;AAAEE,MAAAA,KAAK,EAAE;AAAT,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAkCvE,YAAlC,CAFF,CADF,EAKE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AACE,IAAA,IAAI,EAAC,iBADP;AAEE,IAAA,OAAO,EAAEW,OAFX;AAGE,IAAA,MAAM,EAAE,MACN,MAAC,SAAD;AACE,MAAA,KAAK,EAAEF,MAAM,CAACM,eAAP,KAA2B8C,SADpC;AAEE,MAAA,EAAE,EAAC,gBAFL;AAGE,MAAA,KAAK,EAAC,kBAHR;AAIE,MAAA,QAAQ,EAAER,gBAJZ;AAKE,MAAA,WAAW,EAAC,MALd;AAME,MAAA,QAAQ,EAAE9C,QAAQ,CAAC;AACjB6D,QAAAA,QAAQ,EAAE,mBADO;AAEjBE,QAAAA,SAAS,EAAE;AAFM,OAAD,CANpB;AAUE,MAAA,IAAI,EAAC,OAVP;AAWE,MAAA,SAAS,MAXX;AAYE,MAAA,UAAU,EAAE;AACVA,QAAAA,SAAS,EAAE;AADD,OAZd;AAeE,MAAA,UAAU,EAAE;AACVd,QAAAA,IAAI,EAAE,iBADI;AAEVa,QAAAA,cAAc,EACZ,MAAC,cAAD;AAAgB,UAAA,QAAQ,EAAC,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAHQ,OAfd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CALF,CAxEF,EA8GE,MAAC,GAAD;AAAK,IAAA,KAAK,EAAE;AAAEG,MAAAA,cAAc,EAAE;AAAlB,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AACE,IAAA,OAAO,EAAC,WADV;AAEE,IAAA,KAAK,EAAC,SAFR;AAGE,IAAA,IAAI,EAAC,QAHP;AAIE,IAAA,KAAK,EAAE;AAAEC,MAAAA,WAAW,EAAE;AAAf,KAJT;AAKE,IAAA,SAAS,MALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAUE,MAAC,MAAD;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,OAAO,EAAC,WAFV;AAGE,IAAA,OAAO,EAAEX,cAHX;AAIE,IAAA,SAAS,MAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVF,CA9GF,CADF,EAmIG1D,KAAK,CAACoB,MAAN,IAAgB,MAAC,SAAD;AAAW,IAAA,IAAI,EAAEpB,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnInB,EAoIGN,KAAK,CAAC4E,MAAN,GAAe,CAAf,IACC,2BArIJ,CADF;AA2ID,CArSD;;AAuSA,eAAe7E,kBAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useForm, Controller } from 'react-hook-form'\nimport Button from '@material-ui/core/Button'\nimport { Container, Row, Column } from './styles'\nimport { maskMoney } from '../MaksMoney'\nimport { maskDecimal } from '../MaskDecimal'\nimport List from './components/List'\nimport Cards from './components/Cards'\nimport { IStateLista, IFormInput, IStateCharts } from '../types'\nimport TextField from '@material-ui/core/TextField'\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport TrendingUpIcon from '@material-ui/icons/TrendingUp'\nimport MoneyIcon from '@material-ui/icons/Money'\nimport Info from '../Info'\nimport LineChart from '../Charts/LineChart'\n\nconst FormCalcPorSalario: React.FC = () => {\n  const [lista, setLista] = useState<IStateLista[]>([])\n  const [aporteMensal, setAporteMensal] = useState('0,00')\n  const [showModal, setShowModal] = useState(true)\n  const [datas, setDatas] = useState<IStateCharts>({})\n  const {\n    handleSubmit,\n    register,\n    setValue,\n    errors,\n    getValues,\n    control\n  } = useForm<IFormInput>({\n    defaultValues: {\n      salarioMensal: null,\n      percentualAporte: null,\n      rendimentoAnual: null\n    }\n  })\n\n  const onSubmit = (data: IFormInput) => {\n    const rendimentoAnual = parseFloat(\n      data.rendimentoAnual.toString().replace(',', '.')\n    )\n    const redimentoMensal: number = (1 + rendimentoAnual / 100) ** (1 / 12) - 1\n    const listaTemp: IStateLista[] = []\n    let ano = 12\n    const labels = []\n    const dataLine = []\n    for (let i = 0; i < 360; i++) {\n      if (i === 0) {\n        listaTemp.push({\n          mes: i + 1,\n          rendimento: 0,\n          valorInicial: 0,\n          aporteFinal: parseFloat(\n            aporteMensal.toString().replace('.', '').replace(',', '.')\n          )\n        })\n      } else {\n        const aporteMe = parseFloat(\n          aporteMensal.toString().replace('.', '').replace(',', '.')\n        )\n        const rendimentoAtual: number =\n          listaTemp[i - 1].aporteFinal * redimentoMensal\n        listaTemp.push({\n          mes: i + 1,\n          valorInicial: listaTemp[i - 1].aporteFinal,\n          rendimento: rendimentoAtual,\n          aporteFinal: aporteMe + listaTemp[i - 1].aporteFinal + rendimentoAtual\n        })\n\n        if (ano === i + 1) {\n          labels.push(`Ano ${ano / 12}`)\n          dataLine.push(\n            aporteMe + listaTemp[i - 1].aporteFinal + rendimentoAtual\n          )\n          ano = ano + 12\n        }\n      }\n    }\n    // const datasets = [\n    //   {\n    //     label: 'Evolução Patrimônial',\n    //     fill: false,\n    //     lineTension: 0.1,\n    //     backgroundColor: 'rgba(75,192,192,0.4)',\n    //     borderColor: 'rgba(75,192,192,1)',\n    //     borderCapStyle: 'butt',\n    //     borderDash: [],\n    //     borderDashOffset: 0.0,\n    //     borderJoinStyle: 'miter',\n    //     pointBorderColor: 'rgba(75,192,192,1)',\n    //     pointBackgroundColor: '#fff',\n    //     pointBorderWidth: 1,\n    //     pointHoverRadius: 5,\n    //     pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n    //     pointHoverBorderColor: 'rgba(220,220,220,1)',\n    //     pointHoverBorderWidth: 2,\n    //     pointRadius: 1,\n    //     pointHitRadius: 10,\n    //     dataLine\n    //   }\n    // ]\n    setDatas({\n      labels,\n      datasets: [\n        {\n          label: 'Evolução Patrimônial',\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: 'rgba(75,192,192,0.4)',\n          borderColor: 'rgba(75,192,192,1)',\n          borderCapStyle: 'butt',\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: 'miter',\n          pointBorderColor: 'rgba(75,192,192,1)',\n          pointBackgroundColor: '#fff',\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n          pointHoverBorderColor: 'rgba(220,220,220,1)',\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          dataLine\n        }\n      ]\n    })\n    // setLista(listaTemp)\n  }\n\n  function calcAporteMensal(e) {\n    if (e?.target.name === 'percentualAporte') {\n      setValue('percentualAporte', maskDecimal(e?.target.value))\n    }\n    if (e?.target.name === 'rendimentoAnual') {\n      setValue('rendimentoAnual', maskDecimal(e?.target.value))\n    }\n\n    const salarioMensal: number = parseFloat(\n      getValues('salarioMensal').toString().replace('.', '').replace(',', '.')\n    )\n    const percentualAporte: number =\n      parseFloat(getValues('percentualAporte').toString().replace(',', '.')) /\n      100\n    const aporteMensal: number = percentualAporte * salarioMensal\n\n    if (aporteMensal) {\n      setAporteMensal(maskMoney(Number(aporteMensal).toFixed(2).toString()))\n    } else {\n      setAporteMensal(maskMoney('000'))\n    }\n  }\n\n  function onChangeRemunaration(e) {\n    setValue('salarioMensal', maskMoney(e.target.value))\n    calcAporteMensal(undefined)\n  }\n\n  function onChangeLimpar() {\n    setValue('salarioMensal', undefined)\n    setValue('percentualAporte', undefined)\n    setValue('rendimentoAnual', undefined)\n    setAporteMensal('0,00')\n    setLista([])\n  }\n\n  useEffect(() => {\n    onChangeLimpar()\n    setShowModal(localStorage.getItem(window.location.pathname) === null)\n  }, [])\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Container>\n        {showModal && (\n          <Info>\n            <h1>Aviso!</h1>\n            <h3>Esta calculadora fará uma simulação de 30 anos.</h3>\n            <p>\n              Você colocará seus ganhos mensais (Salário Mensal) e o percentual\n              que você economizará (Percentual do Aporte) para ter a renda que\n              você já recebe e o rendimento anual esperado (Rendimento Anual).\n            </p>\n          </Info>\n        )}\n        <Row>\n          <Column>\n            <Controller\n              name=\"salarioMensal\"\n              control={control}\n              render={() => (\n                <TextField\n                  error={errors.salarioMensal !== undefined}\n                  id=\"standard-basic\"\n                  size=\"small\"\n                  fullWidth\n                  label=\"Salário Mensal\"\n                  onChange={onChangeRemunaration}\n                  placeholder=\"0,00\"\n                  inputRef={register({\n                    required: 'Campo obrigatório'\n                  })}\n                  InputProps={{\n                    name: 'salarioMensal',\n                    startAdornment: (\n                      <InputAdornment position=\"start\">R$</InputAdornment>\n                    )\n                  }}\n                />\n              )}\n            />\n          </Column>\n          <Column>\n            <Controller\n              name=\"percentualAporte\"\n              control={control}\n              render={() => (\n                <TextField\n                  error={errors.percentualAporte !== undefined}\n                  id=\"standard-basic\"\n                  label=\"Percentual do Aporte\"\n                  onChange={calcAporteMensal}\n                  placeholder=\"100%\"\n                  size=\"small\"\n                  fullWidth\n                  inputRef={register({\n                    required: 'Campo obrigatório',\n                    maxLength: 6\n                  })}\n                  inputProps={{\n                    maxLength: 6,\n                    name: 'percentualAporte'\n                  }}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <MoneyIcon />\n                      </InputAdornment>\n                    )\n                  }}\n                />\n              )}\n            />\n          </Column>\n        </Row>\n        <Row>\n          <Column>\n            <label>Aporte Mensal</label>\n            <h2 style={{ color: '#000' }}>R$ {aporteMensal}</h2>\n          </Column>\n          <Column>\n            <Controller\n              name=\"rendimentoAnual\"\n              control={control}\n              render={() => (\n                <TextField\n                  error={errors.rendimentoAnual !== undefined}\n                  id=\"standard-basic\"\n                  label=\"Rendimento Anual\"\n                  onChange={calcAporteMensal}\n                  placeholder=\"100%\"\n                  inputRef={register({\n                    required: 'Campo obrigatório',\n                    maxLength: 6\n                  })}\n                  size=\"small\"\n                  fullWidth\n                  inputProps={{\n                    maxLength: 6\n                  }}\n                  InputProps={{\n                    name: 'rendimentoAnual',\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <TrendingUpIcon />\n                      </InputAdornment>\n                    )\n                  }}\n                />\n              )}\n            />\n          </Column>\n        </Row>\n        <Row style={{ justifyContent: 'flex-end' }}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"submit\"\n            style={{ marginRight: '8px' }}\n            fullWidth\n          >\n            Calcular\n          </Button>\n          <Button\n            type=\"button\"\n            variant=\"contained\"\n            onClick={onChangeLimpar}\n            fullWidth\n          >\n            Limpar\n          </Button>\n        </Row>\n      </Container>\n      {datas.labels && <LineChart data={datas} />}\n      {lista.length > 0 && (\n        <>{/* <Cards lista={lista} />\n          <List lista={lista} /> */}</>\n      )}\n    </form>\n  )\n}\n\nexport default FormCalcPorSalario\n"]},"metadata":{},"sourceType":"module"}